#ifndef __MHT_HPP_
#define __MHT_HPP_

#include <vector>
#include <unordered_map>
#include <boost/any.hpp>
#include "zl_entry.hpp"

NAMESPACE_BEGIN(monoco)

class mht
{
public:
	typedef std::string key_type;
	typedef zl_entry    value_type;
	
	static constexpr uint8_t VEC_TAG = 1;
	static constexpr uint8_t MAP_TAG = 2;
	uint8_t tag = VEC_TAG;
	
private:
	std::vector<std::pair<key_type, value_type>> _vec;
	std::unordered_map<key_type, value_type> _map;

	void _evolve()
		{
			if (tag == MAP_TAG)
				return ;
			for (auto && ele: _vec)
				_map.emplace(ele.first, ele.second);
			_vec.clear();
			tag = MAP_TAG;
		}

	template <typename T>
	void try_evolove(const key_type& key, const T& val)
		{
			if (key.size() > configs::mht_max_size ||
				_vec.size() > configs::mht_max_len)
				_evolve();
		}

public:
	template <typename T>
	void insert(const key_type& str, const T& val)
		{
			try_evolove<T>(val);
			
			if (tag == VEC_TAG)
				_vec.emplace_back(str, val);
			else
				_map.emplace(str, val);
		}

	void remove(const key_type& str)
};

template <>
void
mht::try_evolve<key_type>(const key_type& key, const string& value)
{
	if (key.size() > configs::mht_max_size ||
		value.size() > configs::mht_max_size ||
		_vec.size() > configs::mht_max_len)
		_evolve();
}

NAMESPACE_END(monoco)
#endif
