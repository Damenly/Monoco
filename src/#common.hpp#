/*
1;4601;0c * Copyright (c) 2017, Damenly Su <Damenly at live dot com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef __COMMON_M_HPP
#define __COMMON_M_HPP

#include <typeinfo>
#include <typeindex>
#include <functional>

#include "config.hpp"

NAMESPACE_BEGIN(monoco)

NAMESPACE_BEGIN(types)

using std::hash;
using std::type_index;

template <typename T>
std::size_t hash_type()
{
	return hash<std::type_index>{}(type_index(typeid(T)));
}


static const size_t M_INT64 = hash<type_index>{}(type_index(typeid(int64_t)));
static const size_t M_INT32 = hash<type_index>{}(type_index(typeid(int32_t)));
static const size_t M_INT16 = hash<type_index>{}(type_index(typeid(int16_t)));
static const size_t M_INT8 = hash<type_index>{}(type_index(typeid(int8_t)));

static const size_t M_UINT64 = hash<type_index>{}(type_index(typeid(uint64_t)));
static const size_t M_UINT32 = hash<type_index>{}(type_index(typeid(uint32_t)));
static const size_t M_UINT16 = hash<type_index>{}(type_index(typeid(uint16_t)));
static const size_t M_UINT8 = hash<type_index>{}(type_index(typeid(uint8_t)));

static const size_t M_BOOL = hash<type_index>{}(type_index(typeid(bool)));

static const size_t M_STR = hash<type_index>{}(type_index(typeid(std::string)));

bool is_int(size_t encode)
{
	if (encode == M_INT8 ||
		encode == M_INT16 ||
		encode == M_INT32 ||
		encode == M_INT64)
		return true;
	return false;
}

bool is_uint(size_t encode)
{
	if (encode == M_UINT8 ||
		encode == M_UINT16 ||
		encode == M_UINT32 ||
		encode == M_UINT64)
		return true;
	return false;
}

NAMESPACE_END(types)
NAMESPACE_END(monoco)
#endif // __COMMON_M_HPP
