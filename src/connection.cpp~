#include "connection.hpp"
#include <utility>
#include <vector>
#include "connection_manager.hpp"
#include "request_handler.hpp"


connection::connection(boost::asio::ip::tcp::socket socket,
    connection_manager& manager, request_handler& handler)
  : _socket(std::move(socket)),
    _manager(manager),
    _req_handler(handler)
{
}

void connection::start()
{
  read();
}

void connection::stop()
{
	_socket.close();
}

void connection::read()
{
  auto self(shared_from_this());
  
  _socket.async_read_some(boost::asio::buffer(_buffer),
      [this, self](boost::system::error_code ec, std::size_t bytes_transferred)
      {
        if (!ec)
        {
          request_parser::result_type result;
          std::tie(result, std::ignore) = request_parser_.parse(
              request_, buffer_.data(), buffer_.data() + bytes_transferred);

          if (result == request_parser::good)
          {
            request_handler_.handle_request(request_, reply_);
            write();
          }
          else if (result == request_parser::bad)
          {
            reply_ = reply::stock_reply(reply::bad_request);
            write();
          }
          else
          {
            read();
          }
        }
        else if (ec != boost::asio::error::operation_aborted)
        {
			_manager_.stop(shared_from_this());
        }
      });
}

void connection::write()
{
  auto self(shared_from_this());
  
  boost::asio::async_write(_socket, _reply.to_buffers(),
      [this, self](boost::system::error_code ec, std::size_t)
      {
        if (!ec)
        {
            boost::system::error_code ignored_ec;
			socket_.shutdown(boost::asio::ip::tcp::socket::shutdown_both,
            ignored_ec);
        }

        if (ec != boost::asio::error::operation_aborted)
        {
          _manager_.stop(shared_from_this());
        }
      });
}

